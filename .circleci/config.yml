version: 2.1
workflows:
  lint-build-test:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - build:
          requires:
            - dependencies
      - jest-tests:
          requires:
            - build
      - mocha-tests:
          requires:
            - build
      - integration-tests:
          context: github-packages-docker-credentials
          requires:
            - jest-tests
            - mocha-tests

jobs:
  dependencies:
    docker:
      - image: cryptogarageinc/p2pderivatives-client-ci
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: |
            git submodule update --init --recursive
            git ls-tree HEAD p2pderivatives-proto | awk '{ print $3 }' > p2pd-proto-hash.txt

      - restore_cache:
          keys:
            ## add vX-debug suffix when debugging cache
            - npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}-v2
      - run:
          name: Install nodes modules
          command: |
            if [ -d "node_modules" ]; then
              export HAS_NPM_CACHE="true"
            fi
            npm run-script preci && (cd gen-grpc && npm run-script preci)
            if [ -z "$HAS_NPM_CACHE" ]; then
              npm ci
            fi
      - save_cache:
          key: npm-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}-v2
          paths:
            - node_modules
            - gen-grpc/node_modules

      - restore_cache:
          keys:
            - gen-grpc-deps-{{checksum "p2pd-proto-hash.txt"}}-v2
      - run:
          name: Generate gen grpc
          command: |
            if ls gen-grpc/*.proto >/dev/null 2>&1; then
              export HAS_GEN_GRPC_CACHE="true"
            fi
            if [ -z "$HAS_GEN_GRPC_CACHE" ]; then
              cd gen-grpc && npm run-script gen
            fi
      - save_cache:
          key: gen-grpc-deps-{{checksum "p2pd-proto-hash.txt"}}-v2
          paths:
            - gen-grpc

      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cryptogarageinc/p2pderivatives-client-ci
    steps:
      - attach_workspace:
          at: .
      - run: npm run lint:ci
      - store_test_results:
          path: ./reports/linter
      - store_artifacts:
          path: ./reports/linter

  build:
    docker:
      - image: cryptogarageinc/p2pderivatives-client-ci
    steps:
      - attach_workspace:
          at: .
      - run:
          name: build
          command: CI=false npm run build # ci to false avoid linter warnings as errors

  jest-tests:
    docker:
      - image: cryptogarageinc/p2pderivatives-client-ci
    steps:
      - attach_workspace:
          at: .
      - run:
          name: ReBuild grpc for node
          command: npm rebuild grpc --runtime=node
      - run:
          name: run jest test
          command: npm run test:ci
      - store_test_results:
          path: ./reports/jest
      - store_artifacts:
          path: ./reports/jest

  mocha-tests:
    docker:
      - image: cryptogarageinc/p2pderivatives-client-ci:latest-browser
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Rebuild grpc for electron
          command: npm rebuild grpc --runtime=electron --target=7.0.0
      - run:
          name: Run mocha test
          command: npm run mocha:ci
      - store_test_results:
          path: ./reports/mocha
      - store_artifacts:
          path: ./reports/mocha
  integration-tests:
    docker:
      - image: cimg/base:stable
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to docker repository
          command: |
            echo "$DOCKER_HUB_PASS" | docker login ${DOCKER_HUB_URL} -u "$DOCKER_HUB_USER" --password-stdin
      - attach_workspace:
          at: .
      - run:
          name: Configure and start services
          command: |
            docker create \
              -v oracle-key:/oracle-key \
              -v oracle-config:/oracle-config \
              -v server-config:/server-config \
              -v server-scripts:/server-scripts \
              -v bitcoind-config:/bitcoind-config \
              -v bitcoind-scripts:/bitcoind-scripts \
              -v bitcoind-vectors:/bitcoind-vectors \
              -v reports:/reports \
              -v dev:/dev \
              --name helper alpine /bin/true
            docker cp ./services/oracle/config/. helper:/oracle-config
            docker cp ./services/oracle/key/. helper:/oracle-key
            docker cp ./services/server/config/. helper:/server-config
            docker cp ./services/server/scripts/. helper:/server-scripts
            docker cp ./services/bitcoind/config/. helper:/bitcoind-config
            docker cp ./services/bitcoind/scripts/. helper:/bitcoind-scripts
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d
      - run:
          name: Wait for services availability
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml run dockerize \
             -wait http://oracle:8080/asset \
             -wait tcp://server:8080 \
             -wait tcp://bitcoind:18443
      - run:
          name: Apply migration
          command: |
            # need additional permissions
            docker-compose exec bitcoind /bin/sh -c "chown -R bitcoin /vectors"

            ./services/seed-services.sh
            echo "recovering generated test vectors"
            docker cp helper:/bitcoind-vectors/. ./services/bitcoind/vectors
            docker cp ./. helper:/dev

      - run:
          name: Run Integration tests
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.ci.yml run dev \
              npm run integration:ci
      - run:
          name: Recover tests results
          command: |
            docker cp  helper:/reports/. ./reports
            docker rm helper --force --volumes
          when: always
      - store_test_results:
          path: ./reports
